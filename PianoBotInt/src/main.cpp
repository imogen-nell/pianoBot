#include <Arduino.h> 
#include "controller.h"
#include "open_loop_controller.h"
#include <cstdlib> // Required for integer abs()

// #include "position_sensor.h"
// #include "position_actuator.h"

//hot cross buns
int note_array[807] = {3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 8, 18, 32, 50, 71, 97, 126, 159, 196, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 8, 18, 32, 50, 71, 97, 126, 159, 196, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 8, 18, 32, 50, 71, 97, 126, 159, 196, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 1, 8, 18, 32, 50, 71, 97, 126, 159, 196, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0};
int size = sizeof(note_array)/sizeof(note_array[0]);

int forte_quarts[807] = {3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0, 7, 40, 98, 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 98, 40, 0};

// const int repeated_note[63] = {1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229};
// ---  target sweep ---
// float target_voltage = 1.5f; // initial target in volts
//key positions (voltages for now)
const float PRESSED = 1.0f;
const float RELEASED = 1.56f;

void play_song(int *note_array, int size ){ //using PID
  for (int i = 0; i < size; i++) {
    set_target(note_array[i]);
    vTaskDelay(pdMS_TO_TICKS(10)); // delay 10 ms, lets other tasks run
  }
  set_target(RELEASED);
}


void hold_and_release(float hold_time, float relase_time){
  while(1){
    //release
    float timer_start = millis() / 1000.0f;
    while (millis() / 1000.0f - timer_start < relase_time) {
      set_target(RELEASED);
    }

    //hold
    timer_start = millis() / 1000.0f;
    while (millis() / 1000.0f - timer_start < hold_time) {
      set_target(PRESSED);
    }
  }
  
}

void setup() {
  Serial.begin(115200);

  //vertical motion controller (note playing for 1 finger)
  //initialize linear motion sensor and actuator
  //closed loop controller##########################################
  // float p = 1.5f;
  // float i = 0.0f;
  // float d = 0.0f;
  // init_controller(p, i, d);

  //open loop control ####################
  init_ol();

}  
void loop() {
  // Serial.printf("CTRL,%lu,%d\n", millis(),0);//song start
  play_song_ol(forte_quarts, size);


}
