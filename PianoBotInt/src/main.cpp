#include <Arduino.h> 

//this needed for ESP32 & FreeRTOS
//voice coil 
const int PWMCoilPin = 5;
const int DIRCoilPin = 2;
//hot cross buns
int note_array[813] = {1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 3, 17, 38, 68, 105, 151, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 4, 15, 31, 52, 78, 110, 148, 191, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9};

// const int repeated_note[63] = {1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, -71, -34, -9, 1, 5, 12, 22, 34, 49, 66, 87, 110, 135, 164, 195, 229};

//hall SEnsor 
const int hallPin = 35;

//task handles pointing  to FreeRTOS task
TaskHandle_t hallReadHandle = NULL; 
TaskHandle_t voiceCoilCtrlHandle = NULL;

// shared global state
// volatile int lastHall = 0;
// volatile bool coilRunning = true;

//voice coil control task 
void voiceCoilCtrl(void *parameter){ //FreeRTOS mus return void  & accept single arg
  const int len = sizeof(note_array) / sizeof(note_array[0]);
  while(1){
    int PWM = 255;
    digitalWrite(DIRCoilPin, LOW); //down
    analogWrite(PWMCoilPin, PWM);
    vTaskDelay(1000 / portTICK_PERIOD_MS); //wait 1 s
    PWM = 0;
    digitalWrite(DIRCoilPin, HIGH); //switch direction
    analogWrite(PWMCoilPin, PWM);
    vTaskDelay(1000 / portTICK_PERIOD_MS); //wait 1 s
  }
  // while (1){
  //   for(int i = 0; i < len; i++){
  //     int PWM = note_array[i]; //255 is max for 8bit PWM
  //     if(PWM > 0){
  //       digitalWrite(DIRCoilPin, LOW);
  //       analogWrite(PWMCoilPin, PWM);
  //     } else {
  //       digitalWrite(DIRCoilPin, HIGH);
  //       analogWrite(PWMCoilPin, abs(PWM));
  //     }
  //     vTaskDelay(10 / portTICK_PERIOD_MS); //non-blcoking delay 
  //   }
  // }
}

//hall sensor task (reading sensor & writing to serial )
void hallRead(void *parameter){
  //inf loop 
  for (;;){
    int adc = analogRead(hallPin);
    Serial.printf("Hall,%lu,%d\n", millis(), adc); //time , hall signal
    // delay(2);//TODO: remove later
    vTaskDelay(2 / portTICK_PERIOD_MS); // 2ms 
  }
}
// // put function declarations here:
// int myFunction(int, int);


void setup() {
  //serial set up for hall
  Serial.begin(115200);
  //analogue reference default is 3.3V


  //voice coil set up
  pinMode(PWMCoilPin, OUTPUT);
  pinMode(DIRCoilPin, OUTPUT);
  
  xTaskCreatePinnedToCore(
    hallRead,
    "hallRead",
    4096, //stack size, 4kB
    NULL, //params
    1, //priority
    &hallReadHandle, //task handle
    1 //2 cores 0,1 
  );

  xTaskCreatePinnedToCore(
    voiceCoilCtrl,
    "voiceCoilCtrl",
    4096, //stack size, 4kB
    NULL, //params
    1, //priority
    &hallReadHandle, //task handle
    0 //core 0: 
  );

}

void loop() {
  //freeRTOS scheduler runs task 

}




// // put function definitions here:
// int myFunction(int x, int y) {
//   return x + y;
// }